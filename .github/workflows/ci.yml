name: CI Pipeline for UI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  DOCKER_IMAGE_NAME: ci-ui

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout frontend repo
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: Save Docker Image
        run: docker save ${{ env.DOCKER_IMAGE_NAME }} > ci-ui.tar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-ui
          path: |
            ci-ui.tar
            .

  tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ci-ui

      - name: Load Docker Image
        run: docker load < ci-ui.tar

      - name: Clone API repo
        run: git clone https://github.com/emge1/allegro-clone-api.git api

      - name: Start API and DB
        working-directory: ./api
        run: docker compose -f docker-compose.e2e.yml up -d web_dev db_production
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

      - name: Get network name from docker-compose
        id: get_network
        working-directory: ./api
        run: |
          NET=$(docker network ls --format '{{.Name}}' | grep app-network)
          echo "network=$NET" >> $GITHUB_OUTPUT

      - name: Debug Docker network
        run: |
          echo "==== Docker networks ===="
          docker network ls
          echo "==== Containers ===="
          docker ps -a
          echo "==== Inspect network ===="
          docker network inspect ${{ steps.get_network.outputs.network }} | grep Name

      - name: Start UI container
        run: |
          docker run -d --name ci-ui --network ${{ steps.get_network.outputs.network }} -p 3000:80 ci-ui

      - name: Start Selenium
        run: |
          docker run -d --name selenium --network ${{ steps.get_network.outputs.network }} -p 4444:4444 selenium/standalone-chrome

      - name: Wait for UI
        run: |
          for i in {1..40}; do
            curl -s http://localhost:3000/ && break
            echo "Waiting for UI..."
            sleep 3
          done

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run E2E Tests with Allure
        run: pytest tests --alluredir=allure-results
        env:
          BASE_URL: http://ci-ui:80

      - name: Generate Allure Report
        run: allure generate allure-results --clean -o allure-report
