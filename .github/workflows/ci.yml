name: CI Pipeline for UI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  DOCKER_IMAGE_NAME: ci-ui

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Frontend
        uses: actions/checkout@v4
        with:
          repository: emge1/allegro-clone-frontend
          path: frontend
          clean: false

      - name: Lint Code
        working-directory: ./frontend
        run: ls -a

      - name: Build Docker Image
        working-directory: ./frontend
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: Save Docker Image
        working-directory: ./frontend
        run: docker save ${{ env.DOCKER_IMAGE_NAME }} > ci-ui.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: ci-ui-image
          path: frontend/ci-ui.tar

  tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: ci-ui-image

      - name: Load Docker Image
        run: docker load < ci-ui.tar

      - name: Clone API repo manually
        run: git clone https://github.com/emge1/allegro-clone-api.git api

      - name: Start API and DB
        working-directory: ./api
        run: docker compose -f docker-compose.e2e.yml up -d web_dev db_production
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

      - name: Wait for API
        run: |
          for i in {1..40}; do
            curl -s http://localhost:8000/ && break
            echo "Waiting for API..."
            sleep 3
          done

      - name: Debug â€“ check directories
        run: |
          echo "Current path: $(pwd)"
          ls -a
          echo "Checking for frontend directory:"
          ls -a frontend || echo "frontend directory missing"
          find . -maxdepth 3 -type f \( -name "package.json" -o -name "requirements.txt" \)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r frontend/requirements.txt

      - name: Start Selenium
        run: docker run -d -p 4444:4444 --network host --name selenium selenium/standalone-chrome

      - name: Install Allure CLI
        run: sudo apt-get update && sudo apt-get install -y allure

      - name: Run E2E Tests with Allure
        working-directory: ./frontend
        run: pytest tests --alluredir=allure-results

      - name: Generate Allure Report
        working-directory: ./frontend
        run: allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: frontend/allure-report/

  post-checks:
    runs-on: ubuntu-latest
    needs: [ tests ]
    if: always()

    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: ci-ui-image

      - name: Load Docker Image
        run: docker load < ci-ui.tar

      - name: Extract Static Files from Docker Image
        run: |
          docker create --name temp-ui ${{ env.DOCKER_IMAGE_NAME }}
          docker cp temp-ui:/usr/share/nginx/html ./build
          docker rm temp-ui

      - name: Upload Static Build for CD
        uses: actions/upload-artifact@v4
        with:
          name: react-ui-build
          path: build/

      - name: Clean up Docker
        if: always()
        run: |
          docker compose -f api/docker-compose.e2e.yml down || true
          docker ps -q | xargs -r docker stop || true
          docker ps -aq | xargs -r docker rm || true
          docker network prune -f

      - name: Clean Workspace
        if: always()
        run: rm -rf ./*

      - name: Success Message
        if: success()
        run: echo "Pipeline successfully completed"

      - name: Failure Message
        if: failure()
        run: echo "Pipeline unsuccessful"
